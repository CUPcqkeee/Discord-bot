import disnake
from disnake.ext import commands

texts = {
    "üè∑": {"start": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã", "end": ""},
    "üë•": {"start": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "end": ""},
    "üîí": {"start": "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ –∫–æ–º–Ω–∞—Ç—É", "end": ""},
    "üîì": {"start": "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã–ª–∏ –∫–æ–º–Ω–∞—Ç—É", "end": ""},
    "üö™": {"start": "–£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –∂–µ–ª–∞–µ—Ç–µ –≤—ã–≥–Ω–∞—Ç—å —Å –∫–æ–º–Ω–∞—Ç—ã", "end": ""},
    "‚úî": {"start": "–£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –∂–µ–ª–∞–µ—Ç–µ –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ", "end": ""},
    "‚ùå": {"start": "–£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∂–µ–ª–∞–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ", "end": ""},
    "üëë": {"start": "–£–ø–æ–º—è–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –∂–µ–ª–∞–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç–æ–π", "end": ""}
}


class Buttons(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=0)

    @disnake.ui.button(label="", emoji="üè∑")
    async def _pan(self, button: disnake.ui.button, interaction: disnake.MessageInteraction):
        pass

    @disnake.ui.button(label="", emoji="üë•")
    async def _users(self, button: disnake.ui.button, interaction: disnake.MessageInteraction):
        pass

    @disnake.ui.button(label="", emoji="üîí")
    async def _lock(self, button: disnake.ui.button, interaction: disnake.MessageInteraction):
        pass

    @disnake.ui.button(label="", emoji="üîì")
    async def _unlock(self, button: disnake.ui.button, interaction: disnake.MessageInteraction):
        pass

    @disnake.ui.button(label="", emoji="üö™", row=2)
    async def _dver(self, button: disnake.ui.button, interaction: disnake.MessageInteraction):
        pass

    @disnake.ui.button(label="", emoji="‚úî", row=2)
    async def _dat(self, button: disnake.ui.button, interaction: disnake.MessageInteraction):
        pass

    @disnake.ui.button(label="", emoji="‚ùå", row=2)
    async def _nedat(self, button: disnake.ui.button, interaction: disnake.MessageInteraction):
        pass

    @disnake.ui.button(label="", emoji="üëë", row=2)
    async def _korona(self, button: disnake.ui.button, interaction: disnake.MessageInteraction):
        pass


class PrivateRooms(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.voices = {}
        self.msg_id = int

    @commands.Cog.listener()
    async def on_ready(self):
        channel = self.bot.get_channel(1059440775512981574)
        await channel.purge()
        embed = disnake.Embed(
            title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–æ–π",
            colour=disnake.Colour.green()
        )
        embed.description = """\n
            üè∑Ô∏è - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
            üë• - –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ —Å–ª–æ—Ç–æ–≤
            üîí - –ó–∞–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö
            üîì - –û—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö
            üö™ - –í—ã–≥–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–Ω–∞—Ç—ã
            ‚úî - –î–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∫–æ–º–Ω–∞—Ç—É
            ‚ùå - –ó–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∫–æ–º–Ω–∞—Ç—É
            üëë - –ü–µ—Ä–µ–¥–∞—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç–æ–π
        """
        msg = await channel.send(embed=embed, view=Buttons())
        self.msg_id = msg.id

    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        if after.channel and after.channel.id == 777968491385978902:
            channel = await member.guild.create_voice_channel(
                name=member.display_name,
                category=after.channel.category
            )
            await member.move_to(channel=channel)
            self.voices[channel.id] = member.id
        if before.channel and before.channel.id in self.voices and not len(before.channel.members):
            await before.channel.delete()
            del self.voices[before.channel.id]

    @commands.Cog.listener()
    async def on_message(self, message):
        if message.channel.id == 1059440775512981574 and message.author.id != self.bot.user.id:
            await message.delete()

    @commands.Cog.listener()
    async def on_button_click(self, interaction: disnake.MessageInteraction):
        if interaction.message.id != self.msg_id:
            return
        if not interaction.author.voice:
            return await interaction.response.send_message(
                "–ü–æ—Ö–æ–∂–µ –≤—ã –Ω–µ –≤ –ì–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ..",
                ephemeral=True
            )
        member = interaction.guild.get_member(interaction.author.id)
        channel = member.voice.channel
        if member.id == self.voices[channel.id]:
            await interaction.response.send_message(texts[interaction.component.emoji.name]["start"], ephemeral=True)
            if interaction.component.emoji.name == "üè∑":
                msg = await self.bot.wait_for("message", check=lambda x: x.author == interaction.author, timeout=15)
                await channel.edit(name=msg.content)
            elif interaction.component.emoji.name == "üë•":
                msg = await self.bot.wait_for("message", check=lambda x: x.author == interaction.author, timeout=15)
                if msg.content.isdigit():
                    await channel.edit(user_limit=int(msg.content))
            elif interaction.component.emoji.name == "üîí":
                await channel.set_permissions(
                    interaction.guild.default_role,
                    connect=False
                )
            elif interaction.component.emoji.name == "üîì":
                await channel.set_permissions(
                    interaction.guild.default_role,
                    connect=True
                )
            elif interaction.component.emoji.name == "üö™":
                msg = await self.bot.wait_for("message", check=lambda x: x.author == interaction.author, timeout=15)
                if len(msg.mentions):
                    for u in msg.mentions:
                        if u.voice.channel == channel:
                            await u.move_to(channel=None)
            elif interaction.component.emoji.name == "‚úî":
                msg = await self.bot.wait_for("message", check=lambda x: x.author == interaction.author, timeout=15)
                if len(msg.mentions):
                    for u in msg.mentions:
                        await channel.set_permissions(
                            u,
                            connect=True
                        )
            elif interaction.component.emoji.name == "‚ùå":
                msg = await self.bot.wait_for("message", check=lambda x: x.author == interaction.author, timeout=15)
                if len(msg.mentions):
                    for u in msg.mentions:
                        await channel.set_permissions(
                            u,
                            connect=False
                        )
            elif interaction.component.emoji.name == "üëë":
                msg = await self.bot.wait_for("message", check=lambda x: x.author == interaction.author, timeout=15)
                if len(msg.mentions):
                    self.voices[channel.id] = msg.mentions[0].id
            else:
                return await interaction.followup.send(texts[interaction.component.emoji.name]["end"], ephemeral=True)
        else:
            return await interaction.response.send_message(
                "–ü—Ä–æ—Å—Ç–∏, –ø–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª :(",
                ephemeral=True
            )

def setup(bot):
    bot.add_cog(PrivateRooms(bot))
